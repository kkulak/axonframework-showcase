import com.bmuschko.gradle.docker.tasks.image.DockerBuildImage
import com.bmuschko.gradle.docker.tasks.image.DockerPushImage
import com.bmuschko.gradle.docker.tasks.image.DockerTagImage
import com.bmuschko.gradle.docker.tasks.image.Dockerfile

import java.time.LocalDateTime
import java.time.format.DateTimeFormatter

apply plugin: 'spring-boot'
apply plugin: 'com.bmuschko.docker-java-application'
mainClassName = 'knbit.notification.bc.Application'

buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven { url "http://repo.spring.io/milestone" }
    }

    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:1.2.2.RELEASE")
        classpath 'com.bmuschko:gradle-docker-plugin:2.4'
    }
}

dependencies {
    // knbit-events-bc
    compile project(':events-bc-core')

    // spring-boot
    compile 'org.springframework.boot:spring-boot-starter-web'
    testCompile 'org.springframework.boot:spring-boot-starter-test:1.2.5.RELEASE'

    // spring-websocket
    compile("org.springframework.boot:spring-boot-starter-websocket")
    compile("org.springframework:spring-messaging")

    // spring-data
    compile 'org.springframework.boot:spring-boot-starter-data-jpa:1.2.3.RELEASE'
    compile 'hsqldb:hsqldb:1.8.0.10'
    compile 'org.postgresql:postgresql:9.4-1203-jdbc42'
}

docker {
    registryCredentials {
        username = dockerRegistryProperties.username
        password = dockerRegistryProperties.password
        email = dockerRegistryProperties.email
    }
}

task createDockerfile(type: Dockerfile) {
    dependsOn build
    destFile = project.file('build/Dockerfile')
    from 'java:8'
    volume '/tmp'
    addFile 'libs/notification-bc-*.jar', 'notification-bc.jar'
    runCommand 'bash -c "touch /notification-bc.jar"'
    entryPoint '/bin/sh', '-c', 'java -Xmx$HEAP_SIZE -jar /notification-bc.jar'
    exposePort 5672
}

task buildImage(type: DockerBuildImage) {
    dependsOn createDockerfile
    inputDir = createDockerfile.destFile.parentFile
    tag = 'knbitevents/notification-bc:latest'
}

task tagImage(type: DockerTagImage) {
    dependsOn buildImage
    repository = 'knbitevents/notification-bc'
    imageId = 'knbitevents/notification-bc'
    tag = version + '-' + LocalDateTime.now().format(DateTimeFormatter.ofPattern("yyyy-MM-dd_hh.mm.ss"))
}

task pushImage(type: DockerPushImage) {
    dependsOn tagImage
    imageName = 'knbitevents/notification-bc'
}

task runApp() {
    dependsOn bootRun
}

bootRun {
    systemProperties = System.properties
}
